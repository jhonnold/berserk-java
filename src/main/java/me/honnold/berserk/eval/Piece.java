package me.honnold.berserk.eval;

public class Piece {
    public static final int[][] mvvLva = {
            {105, 105, 205, 205, 305, 305, 405, 405, 505, 505, 605, 605},
            {105, 105, 205, 205, 305, 305, 405, 405, 505, 505, 605, 605},
            {104, 104, 204, 204, 304, 304, 404, 404, 504, 504, 604, 604},
            {104, 104, 204, 204, 304, 304, 404, 404, 504, 504, 604, 604},
            {103, 103, 203, 203, 303, 303, 403, 403, 503, 503, 603, 603},
            {103, 103, 203, 203, 303, 303, 403, 403, 503, 503, 603, 603},
            {102, 102, 202, 202, 302, 302, 402, 402, 502, 502, 602, 602},
            {102, 102, 202, 202, 302, 302, 402, 402, 502, 502, 602, 602},
            {101, 101, 201, 201, 301, 301, 401, 401, 501, 501, 601, 601},
            {101, 101, 201, 201, 301, 301, 401, 401, 501, 501, 601, 601},
            {100, 100, 200, 200, 300, 300, 400, 400, 500, 500, 600, 600},
            {100, 100, 200, 200, 300, 300, 400, 400, 500, 500, 600, 600},
            };

    public static final int[] pieceValues = {
            100, 546, 548, 688, 1563, 50000, 146, 394, 421, 755, 1429, 50000
    };

    // @formatter:off
    public static final int[][][] positionValue = {
            {
                    {
                            0,   0,   0,   0,   0,   0,   0,   0,
                            108, 102,  93,  78,  78,  93, 102, 108,
                            -15,   9,  61,  34,  34,  61,   9, -15,
                            -25,  22,  19,  47,  47,  19,  22, -25,
                            -25,   2,   9,  36,  36,   9,   2, -25,
                            -17,  17,  10,  17,  17,  10,  17, -17,
                            -37,   9,   7,  -2,  -2,   7,   9, -37,
                            0,   0,   0,   0,   0,   0,   0,   0,
                    },
                    {
                            -94, -85, -92, -42, -42, -92, -85, -94,
                            -65, -40,  86,  -9,  -9,  86, -40, -65,
                            -33,  80,  56,  66,  66,  56,  80, -33,
                            8,   7,  32,  28,  28,  32,   7,   8,
                            -1,  19,  22,  26,  26,  22,  19,  -1,
                            -20,   5,  16,  22,  22,  16,   5, -20,
                            -20, -42,   3,   6,   6,   3, -42, -20,
                            -61, -20, -43, -21, -21, -43, -20, -61,
                    },
                    {
                            -21, -16, -77, -76, -76, -77, -16, -21,
                            -58,  16,  10,  -6,  -6,  10,  16, -58,
                            -30,  26,  46,  22,  22,  46,  26, -30,
                            -12, -18,  13,  35,  35,  13, -18, -12,
                            -9,   1,   6,  25,  25,   6,   1,  -9,
                            -12,  17,  18,  13,  13,  18,  17, -12,
                            9,  27,  20,  10,  10,  20,  27,   9,
                            -47, -21,  -9, -17, -17,  -9, -21, -47,
                    },
                    {
                            15,  25,  -3,  54,  54,  -3,  25,  15,
                            6,   3,  62,  56,  56,  62,   3,   6,
                            -3,  52,  29,  47,  47,  29,  52,  -3,
                            -18,  -2,  27,  51,  51,  27,  -2, -18,
                            -35,   1,  -3,  25,  25,  -3,   1, -35,
                            -46,  -8,  -1,  11,  11,  -1,  -8, -46,
                            -68,  -5,  -7,  10,  10,  -7,  -5, -68,
                            -13, -17,   5,  39,  39,   5, -17, -13,
                    },
                    {
                            5,  25,  36,  48,  48,  36,  25,   5,
                            -12, -44,  24,  14,  14,  24, -44, -12,
                            20,  22,  26,  40,  40,  26,  22,  20,
                            -7, -22,  -1,  -1,  -1,  -1, -22,  -7,
                            -11, -11, -10, -11, -11, -10, -11, -11,
                            -18,   7, -11, -10, -10, -11,   7, -18,
                            -50, -26,  14,  -1,  -1,  14, -26, -50,
                            -42, -38, -28,   7,   7, -28, -38, -42,
                    },
                    {
                            -32,   6,   6, -19, -19,   6,   6, -32,
                            9,  57,  78,  72,  72,  78,  57,   9,
                            33,  88,  69,  45,  45,  69,  88,  33,
                            -12,  38,  37,  11,  11,  37,  38, -12,
                            -82,   3, -22, -28, -28, -22,   3, -82,
                            -43,  15, -29, -38, -38, -29,  15, -43,
                            36,  36, -40, -80, -80, -40,  36,  36,
                            16,  62, -41,  29,  29, -41,  62,  16,
                    }
            },
            {
                    {
                            0,   0,   0,   0,   0,   0,   0,   0,
                            108, 108, 104,  95,  95, 104, 108, 108,
                            76,  70,  26,   3,   3,  26,  70,  76,
                            1, -14, -27, -49, -49, -27, -14,   1,
                            -22, -28, -37, -49, -49, -37, -28, -22,
                            -33, -40, -38, -34, -34, -38, -40, -33,
                            -25, -42, -28, -19, -19, -28, -42, -25,
                            0,   0,   0,   0,   0,   0,   0,   0,
                    },
                    {
                            -94, -54, -32, -39, -39, -32, -54, -94,
                            -30, -11, -48, -10, -10, -48, -11, -30,
                            -38, -30,  13,   1,   1,  13, -30, -38,
                            -18,   7,  28,  30,  30,  28,   7, -18,
                            -10,   2,  28,  32,  32,  28,   2, -10,
                            -10,  -2,   9,  28,  28,   9,  -2, -10,
                            -23,  -6,  -4,  11,  11,  -4,  -6, -23,
                            -27, -33,  -3,   3,   3,  -3, -33, -27,
                    },
                    {
                            -14, -11, -10,  -3,  -3, -10, -11, -14,
                            8,  -2,  -3, -10, -10,  -3,  -2,   8,
                            19,   4,   1,   0,   0,   1,   4,  19,
                            9,  19,  15,  12,  12,  15,  19,   9,
                            1,   3,  12,  14,  14,  12,   3,   1,
                            1,  -2,   7,  19,  19,   7,  -2,   1,
                            -21, -23,  -6,  15,  15,  -6, -23, -21,
                            -19,   3,  -5,  12,  12,  -5,   3, -19,
                    },
                    {
                            29,  19,  26,  15,  15,  26,  19,  29,
                            13,  15,  -3,  -9,  -9,  -3,  15,  13,
                            -1,  -9,  -3,  -9,  -9,  -3,  -9,  -1,
                            10,   2,  10,  -9,  -9,  10,   2,  10,
                            17,   5,   9,  -4,  -4,   9,   5,  17,
                            13,   7,  -7,  -9,  -9,  -7,   7,  13,
                            24,   1,   1,  -1,  -1,   1,   1,  24,
                            3,  17,   6,  -4,  -4,   6,  17,   3,
                    },
                    {
                            -13,   4,  12,  12,  12,  12,   4, -13,
                            -14,  -9,  12,  13,  13,  12,  -9, -14,
                            -13,  -4,  12,  12,  12,  12,  -4, -13,
                            -6,  14,  14,  14,  14,  14,  14,  -6,
                            -7,  14,  14,  14,  14,  14,  14,  -7,
                            -5, -13,  13,  14,  14,  13, -13,  -5,
                            -14, -14, -10,   1,   1, -10, -14, -14,
                            -12, -14, -14, -25, -25, -14, -14, -12,
                    },
                    {
                            -32,  -6,  -6, -14, -14,  -6,  -6, -32,
                            4,  33,  37,  28,  28,  37,  33,   4,
                            11,  50,  57,  29,  29,  57,  50,  11,
                            -7,  38,  49,  51,  51,  49,  38,  -7,
                            -11,  20,  49,  57,  57,  49,  20, -11,
                            -10,  19,  43,  54,  54,  43,  19, -10,
                            -32,   2,  34,  46,  46,  34,   2, -32,
                            -84, -57, -17, -33, -33, -17, -57, -84,
                    },
            }
    };
    // @formatter:on
    private static final int[] mirror = {
            56, 57, 58, 59, 60, 61, 62, 63,
            48, 49, 50, 51, 52, 53, 54, 55,
            40, 41, 42, 43, 44, 45, 46, 47,
            32, 33, 34, 35, 36, 37, 38, 39,
            24, 25, 26, 27, 28, 29, 30, 31,
            16, 17, 18, 19, 20, 21, 22, 23,
            8, 9, 10, 11, 12, 13, 14, 15,
            0, 1, 2, 3, 4, 5, 6, 7
    };
    public static int[][][] mobilities = {
            { // knights
              {-53, -31, -21, -22, 0, 0, 0, 0, 23},
              {-55, -64, -23, -8, 0, 0, 0, 0, -18},
              },
            { // bishops
              {-25, -12, -29, -9, 0, 0, 0, 0, 9, 3, 14, 20, 0, 0},
              {-37, -45, -34, -16, 0, 0, 0, 0, 11, 11, 3, 2, 0, 0},
              },
            { // rooks
              {-76, 29, 11, -3, 0, 0, 0, 0, 3, 14, 38, 54, 0, 0, 0},
              {-58, -45, -49, -52, 0, 0, 0, 0, -6, -5, -4, -9, 0, 0, 0},
              },
            { // queens
              {0, 6, -18, -12, 0, 0, 0, 0, 6, 6, 5, 7, 0, 0, 0, 0, 9, 10, 13, 35, 0, 0, 0, 0, 48, 14, 26, 3},
              {0, -12, -83, -24, 0, 0, 0, 0, -47, -46, -19, -28, 0, 0, 0, 0, 7, 7, 10, 8, 0, 0, 0, 0, 21, 4, 26, 13},
              },
            };

    public static int getPieceMobilityValue(int pieceIdx, int squares, int phase) {
        int mg = mobilities[(pieceIdx >> 1) - 1][0][squares];
        int eg = mobilities[(pieceIdx >> 1) - 1][1][squares];

        return (mg * (256 - phase) + (eg * phase)) / 256;
    }

    public static int getPieceValue(int pieceIdx, int phase) {
        int idx = pieceIdx >> 1;

        int mg = pieceValues[idx];
        int eg = pieceValues[idx + 6];

        return (mg * (256 - phase) + (eg * phase)) / 256;
    }

    public static int getPositionValue(int pieceIdx, int square, int phase) {
        if (pieceIdx % 2 == 1) square = mirror[square];

        int mg = positionValue[0][pieceIdx >> 1][square];
        int eg = positionValue[1][pieceIdx >> 1][square];

        return (mg * (256 - phase) + (eg * phase)) / 256;
    }
}
